#!/bin/bash
#
# by Jama Ariai (jama.ariai@oc.jlug.de)
#

#### list of Variables in alphabetic order

# Density		= Density of the solvent in g/mL
# MW_M			= Molar Mass of the solute in g/mol
# MW_S			= Molar Mass of the solvent in g/mol
# N_cav			= Number of accessible cavities
# Permitivity	= Relative Permitivity of the solvent 
# R 			= ???
# r_cav			= ??? in Ang
# r_gyr			= Radius of Gyration in Ang
# r_z			= Help-Radius for S_rot
# solvent		= Solvent Specification
# S_cav			= entropy of cavitation formation in cal/mol*K
# S_conc		= standard state correction for entropy in cal/mol*K
# S_rot			= rotational entropy in cal/mol*K
# S_rot_diff	= S_rot - S_rot_gas
# S_rot_gas		= rotational entropy in gas-phase in cal/mol*K
# S_soln		= final solution-phase entropy in cal/mol*K
# S_solv 		= Entropy of Solvation = S_soln - S_gas + S_conc
# S_trans		= translational entropy in cal/mol*K
# S_trans_diff	= S_trans - S_trans_gas
# S_vib			= vibrational entropy in cal/mol*K
# Temperature	= Temperature in K
# THETA_0		= Help-variable for S_rot
# Vol			= ??? in Ang**3
# Vol_cav		= ??? in Ang**3
# Vol_free		= ??? in Ang**3
# Vol_M			= vdW-Volume of the solute in Ang**3
# Vol_S			= vdW-Volume of the solvent in Ang**3
# x				= ???
# y				= ???

#### Fundamental Physical Constants from https://physics.nist.gov/cuu/Constants/index.html
h_Planck='(6.62607015*10^(-34))'	# Planck Constant in J*s (https://physics.nist.gov/cgi-bin/cuu/Value?h|search_for=planck)
k_Boltz='(1.380649*(10^-23))'		# Boltzmann Constant in J/K (https://physics.nist.gov/cgi-bin/cuu/Value?k|search_for=boltzmann)						
N_Avog='(6.02214076*(10^23))' 		# Avogadro Constant in 1/mol (https://physics.nist.gov/cgi-bin/cuu/Value?na|search_for=adopted_in!)
PI='(4*a(1))'
R_gas='(8.314462618/4.184)' 		# Molar Gas Constant in cal/mol*K (https://physics.nist.gov/cgi-bin/cuu/Value?r|search_for=gas+constant)
# Note: x^(n/m) = exp[ (n*ln x)/m ], i.e., "e( n*l(x)/m )"

###################
#### Functions ####
###################

arccos () {
    scale=3
    if (( $(echo "$1 == 0" | bc -l) )); then
        echo "a(1)*2" | bc -l
    elif (( $(echo "(-1 <= $1) && ($1 < 0)" | bc -l) )); then
        echo "scale=${scale}; a(1)*4 - a(sqrt((1/($1^2))-1))" | bc -l
    elif (( $(echo "(0 < $1) && ($1 <= 1)" | bc -l) )); then
        echo "scale=${scale}; a(sqrt((1/($1^2))-1))" | bc -l
    else
        echo "input out of range (arccos)"
        return 1
    fi
}

### calcultes the rotational entropy
### PREREQUISITES (besides solvent data): S_rot_gas, r_gyr, (r_cav from S_trans-function)
### OUTPUT: $S_rot in cal/mol*K
function calcS_rot {
unset S_rot r_z S_rot_diff r_free THETA_0 THETA_0_arg r_cav

r_cav=$(echo "e( l((3*$Vol_cav)/(4*$PI))/3 )") 
if [[ -z $r_cav ]] || [[ -z $r_gyr ]]; then echo "S_rot cannot be calculated. Radii missing."; exit; fi

if (( $(echo "$r_cav >= $r_gyr" | bc -l) )); then	# case A 
	r_z=$(echo "$r_cav-$r_gyr" | bc -l)
	S_rot_diff=$(echo "(3*$R_gas*l($r_z/$r_cav))" | bc -l)	### S_rot_diff = S_rot_soln - S_rot_gas
else	# case B
	if [[ -z $Vol_free ]]; then echo "S_rot cannot be calculated. Free Volume missing."; removeTempFiles; exit; fi
	echo "CAUTION!!! The radius of gyration is greater than the radius of the cavity! S_rot is modified. This has never occured before and is not tested for reliability. (large, non-spherical solute in dense solvent?) Please report this case (jama.ariai@oc.jlug.de)."
	echo "CAUTION!!! The radius of gyration is greater than the radius of the cavity! S_rot is modified. This has never occured before and is not tested for reliability. (large, non-spherical solute in dense solvent?) Please report this case (jama.ariai@oc.jlug.de)." >> $tempWarning
	r_free=$(echo "e( l((3*$Vol_free)/(4*$PI))/3 )" | bc -l)
	r_z=$r_free
	THETA_0_arg=$(echo "$r_gyr/(sqrt((($r_gyr)^2)+(($r_free)^2)))" | bc -l)
	THETA_0=$(arccos $THETA_0_arg)
	THETA_0=$(echo 2*$THETA_0 | bc -l)
	S_rot_diff=$(echo "$R_gas*(2*l($THETA_0/$PI)+$Temperature)+(3*$R_gas*l($r_z/$r_cav))" | bc -l)	### ### S_rot_diff = S_rot_soln - S_rot_gas
fi
echo "S_rot_diff(T=$Temperature K) in cal/mol*K: $S_rot_diff" 
if ! [[ -z $S_rot_gas ]]; then 
	S_rot=$(echo "$S_rot_gas+$S_rot_diff" | bc -l)
	echo "S_rot(T=$Temperature K) in cal/mol*K: $S_rot" 
fi

}

### calculates the translational entropy
### PREREQUISITES (besides solvent data): Vol_M, MW_M
### OUTPUT: $S_trans in cal/mol*K
function calcS_trans {
# Note: x^(n/m) = exp[ (n*ln x)/m ], i.e., "e( n*l(x)/m )"
unset Vol_free Vol_cav x N_cav Vol S_trans S_trans_diff

Vol_free=$(echo "(($MW_S*(10^24))/($N_Avog*$Density))-$Vol_S" | bc -l)
Vol_cav=$(echo "(e( 1*l($Vol_M)/3 )+e( 1*l($Vol_free)/3 ))^3" | bc -l)
echo "The cavity volume is $Vol_cav Ang**3"
if (( $(echo "$Vol_free > $Vol_M" | bc -l) )); then
	x=$(echo "(e( 2*l($Vol_free)/3 )-e( 2*l($Vol_M)/3 ))/(e( 2*l($Vol_free)/3 )+e( 2*l($Vol_S)/3 ))" | bc -l)
else
	x=0
fi
N_cav=$(echo "1+((4*e( 2*l($Vol_cav)/3 ))/(e( 2*l($Vol_free)/3 )+e( 2*l($Vol_S)/3 )))*((1/(1-$x))-1)" | bc -l)
echo "Number of accessible cavities: $N_cav (typically 1 unless small solute in bulky/low density solvents)"
Vol=$(echo "$N_cav*$Vol_cav" | bc -l)
S_trans_diff=$(echo "$R_gas*l($Vol/$Temperature)-9.792392" | bc -l)	### S_trans_diff = S_trans - S_trans_gas = R*ln[Vsoln/Vgas]
#S_trans=$(echo "$R_gas*((1.5*l((2*$PI*(10^(-3))*$k_Boltz)/($N_Avog*($h_Planck^(2)))))+(1.5*l($MW_M*$Temperature))+(l((10^(-30))*$Vol))+2.5)" | bc -l)
S_trans=$(echo "$R_gas*((1.5*l($MW_M*$Temperature))+l($Vol)-6.079431401)" | bc -l)
echo -e "S_trans_diff(T=$Temperature K) in cal/mol*K: $S_trans_diff\nS_trans(T=$Temperature K) in cal/mol*K: $S_trans"
Vol_cav=$(echo $Vol_cav | xargs printf "%.*f\n" 3)
N_cav=$(echo $N_cav | xargs printf "%.*f\n" 2)
}

### calculates the entropy of cavity formation
### PREREQUISITES (besides solvent data): Vol_M
### OUTPUT: $S_cav in cal/mol*K
function calcS_cav {
unset y R S_cav

y=$(echo "(3/(4*$PI))*(($Permitivity-1)/($Permitivity+2))" | bc -l)
R=$(echo "e(l($Vol_M/$Vol_S)/3)" | bc -l)
S_cav=$(echo "-$R_gas*((-l(1-$y))+((3*$y*$R)/(1-$y))+(((3*$y)/(1-$y))+(4.5*(($y/(1-$y))^2)))*($R^2))" | bc -l)

#bugfix
#echo y: $y
#echo R: $R
echo "S_cav(T=$Temperature K) in cal/mol*K: $S_cav"
}


#Grimme's quasi-harmonic rigid-rotor harmonic oscillator approach (qRRHO)
#calculates S_vib based on HARMFREQS
function calcS_vib_qRRHO {

unset IMAGFREQS

MOLINERTIA_avg=1	# effective moment of inertia in 10^-44 kg*m^2 corresponding to: 10^-44/B_av
S_vib=0
k=-1
FREQ_0=100; # in cm^-1, about 0.5 kT
damp=4; # Head-Gordon damping function
echo "Read ${#HARMFREQS[@]} vibrational frequencies" >> $tempentropies
for (( i=0 ; i < ${#HARMFREQS[@]} ; i++ )); do
	if ! (( $(echo "${HARMFREQS[$i]} < 0" | bc -l) )); then	### only non-imaginary frequencies are considered
		FREQ=${HARMFREQS[$i]}	### in cm^-1
		THETA_vib=$(echo "1.43877696*$FREQ" | bc -l) #in K
		COEFF_vib=$(echo "$THETA_vib/$Temperature" | bc -l) # Theta_vib / Temperature
		S_purevib=$(echo ""$R_gas"*((($COEFF_vib)/(e($COEFF_vib)-1))-(l(1-e(-$COEFF_vib))))" | bc -l)
		S_freerot=$(echo "0.5*"$R_gas"*(5.356746219+l($Temperature)-l($MOLINERTIA_avg+(35.72353633*$FREQ)))" | bc -l)
		weightfact=$(echo "(1)/((1)+(($FREQ_0/$FREQ)^$damp))" | bc -l)
		S=$(echo "($weightfact*$S_purevib)+((1-$weightfact)*$S_freerot)" | bc -l)
		S_vib=$(echo "$S+"$S_vib"" | bc -l)
		
#		echo -e "bugfix:\nFrequency $i: $FREQ\nS_freerot: $S_freerot\nS_vib: $S_purevib\nS_qRRHO: $S"
	else
		((k+=1))
		IMAGFREQS[$k]=${HARMFREQS[$i]}	## numerical value of the imaginary frequency
	fi
done

if ! [[ -z ${IMAGFREQS[@]} ]]; then
	echo "${#IMAGFREQS[@]} imaginary frequencies were not considered for S_vib: ${IMAGFREQS[@]}"
	echo "${#IMAGFREQS[@]} imaginary frequencies were not considered for S_vib: ${IMAGFREQS[@]}" >> $tempentropies
fi

echo "S_QRRHO(T=$Temperature K) / cal/mol*K: $S_vib" >> $tempentropies


}


### calculates the standard state correction 
### general Formula: S_conc = R * ln{ci/cf} with ci and cf initial and final concentration respectively
### A (solute != solvent): 1 bar, 1 M (IUPAC): S_conc[cal/mol*K] = -R[cal/mol*K] * l{T[K]} + 4.942522175 cal/mol*K
### B (solute = solvent): 1 bar, liq (IUPAC): S_conc[cal/mol*K] = R[cal/mol*K] * l{(M[g/mol])/(T[K]*rho[g/mL]*1000)} + 4.942522175 cal/mol*K
### B = A + R[cal/mol*K] * l{(M[g/mol])/(rho[g/mL]*1000)} = A + C
### OUTPUT: $S_conc in cal/mol*K
function calcS_conc {
S_conc=$(echo "-$R_gas*l($Temperature)+4.942522175" | sed 's/--/+/g' | bc -l) ### case A
if ! [[ $conccorr -eq 1 ]]; then	### case A: solute != solvent
	echo "The standard state of the condensed phase is 1 mol/L."
	S_conc_add=0
	ref_sol='1 M'
else								### case B: solute = solvent
	echo "The standard state of the condensed phase is the pure liquid-phase."
	S_conc_add=$(echo "$R_gas*l(($MW_S)/(1000*$Density))" | sed 's/--/+/g' | bc -l) ### term C
	ref_sol='liq'
fi
S_conc=$(echo "$S_conc+$S_conc_add" | sed 's/--/+/g' | bc -l)
echo "S_conc(T=$Temperature K, 1 bar, $ref_sol) in cal/mol*K: $S_conc"
}

function removeTempFiles {
TEMPFILES=($(echo "$tempSolventData $tempWarning $tempInputInfo $tempcalcGyradius $tempcalcVolume $tempentropies"))
for (( i=0 ; i < ${#TEMPFILES[@]} ; i++ )); do
	if [[ -f ${TEMPFILES[$i]} ]]; then rm ${TEMPFILES[$i]}; fi
done
}

function checkExitCode {	### if last exit-code is non-zero ERRORFILE is printed and temporary files are removed

if [ $? -ne 0 ]; then
	echo "ERROR: non-zero exit code!!"
	if [[ -f $ERRORFILE ]]; then
		echo "This might help to fix your error:"
		cat $ERRORFILE
	fi
	if [[ -f $tempWarning ]]; then
		echo "Besides following warnings occured:"
		cat $tempWarning
	fi
	removeTempFiles
	exit
fi

}

function newSection {
echo "----------------------------------------------------------------------------------------------------------"
}

### checks if $XYZFILE is in xmol-format with case-sensitive Element symbols
### output: $xyzvalid=1 (yes) $xyzvalid=0 (no)
function xyz-format-check {

# xmol-format with case-sensitive element symbols
# example:
# [NUMBER OF ATOMS]
# [WHATEVER]
# [Case-sensitive Element Symbol] [X] [Y] [Z]
# ...
##################################################

xyzvalid=0
CHECK=$(tail -1 $XYZFILE | awk '{print NF}')
while [[ $CHECK -ne 4 ]]; do
	sed -i "$"d $XYZFILE	### remove last line unless it contains 4 columns
	CHECK=$(tail -1 $XYZFILE | awk '{print NF}')
done
sed -i 's/^[ \t]*//' $XYZFILE ### remove all leading spaces
CHECK=$(head -1 $XYZFILE | tr -d '\r')
if ! [[ $CHECK =~ ^[0-9]+\s*$ ]]; then
	#echo -e "\033[31mInvalid XYZ-format! First line must contain the number of atoms.\033[0m"
	return 1
fi
((CHECK+=2))
linenumber=$(wc -l $XYZFILE | awk '{print $1}')
if ! [[ "$CHECK" = "$linenumber" ]]; then
	#echo -e "\033[31mInvalid XYZ-format! First line must contain the number of atoms.\nCoordinates must start from 3rd line.\033[0m"
	return 1
fi
CHECK=$(sed -n 3,"$linenumber"p $XYZFILE)
re='^[A-Z][a-z]?(\s+[-]?[0-9]*\.[0-9]*){3}(\s+[A-Z][a-z]?(\s+[-]?[0-9]*\.[0-9]*){3})*\s*$'
if ! [[ $CHECK =~ $re ]]; then
	#echo -e "\033[31mInvalid XYZ-format!\nRequirement: [case-sensitive Element Symbol] [x] [y] [z]\033[0m"
	return 128
fi
xyzvalid=1

}

## converts $XYZFILE into a xmol-format with case-sensitive element symbols
## requires convertPTE
function convert-xyz-to-valid {

tempxyzfile=new-$random-temp-File.xyz
formatedXYZFILE=${XYZFILE/.xyz}-modxmol.xyz
maxline=$(wc -l $XYZFILE | awk '{print $1}')
regex1='^[0-9]{1,3}(\s+[-]?[0-9]*\.[0-9]*){3}\s*$'	### [Atomic Number] [X] [Y] [Z]
regex2='^[a-z]{1,2}(\s+[-]?[0-9]*\.[0-9]*){3}\s*$'	### [case-insensitive element symbol] [X] [Y] [Z]
regex3='^[A-Z][a-z]?(\s+[-]?[0-9]*\.[0-9]*){3}\s*$' ###	[case-sensitive element symbol][X] [Y] [Z]
for (( i=1 ; i <= $maxline ; i++ )) ; do
	unset CHECK coords atomicnumber symbol 
	CHECK=$(sed -n "$i"p $XYZFILE)
	if [[ $CHECK =~ $regex3 ]]; then 
		echo $CHECK >> $tempxyzfile
	elif [[ $CHECK =~ $regex2 ]]; then 
		CHECK="$(tr '[:lower:]' '[:upper:]' <<< ${CHECK:0:1})${CHECK:1}" ## capitalizes first character
		echo $CHECK >> $tempxyzfile
	elif [[ $CHECK =~ $regex1 ]]; then 
		coords=$(echo $CHECK | awk '{print $2 "   "  $3 "   " $4}')
		atomicnumber=$(echo $CHECK | awk '{print $1}')
		symbol=$(convertPTE -S $atomicnumber)
		if [[ -z $symbol ]] ; then
			echo "ERROR! Conversion to valid xmol-format failed!"
			return
		fi 
		echo "$symbol   $coords" >> $tempxyzfile
	fi
done
numatinfo=$(wc -l $tempxyzfile | awk '{print $1}')
sed -i "1i$numatinfo\n" $tempxyzfile
if [[ "$XYZFILE" != "$FILE" ]]; then rm $XYZFILE; fi
mv $tempxyzfile $formatedXYZFILE
XYZFILE=$formatedXYZFILE

}

### writes last set of coordinates found in $OUTFILE into $XYZFILE
### does not convert to xmol!
### implemented software: orca, gaussian
function outfile-to-xyzfile {

unset start end numatinfo 
if grep -q " * O   R   C   A *" $OUTFILE; then 
	start=$(grep -n "CARTESIAN COORDINATES (ANGSTROEM)" $OUTFILE | tail -1 | cut -f1 -d':'); ((start+=2))
	end=$(grep -n "CARTESIAN COORDINATES (A.U.)" $OUTFILE | tail -1 | cut -f1 -d':'); ((end-=3))
	numatinfo=$((end-start+1))
	echo -e "$numatinfo\n" > $XYZFILE 
	sed -n "$start","$end"p $OUTFILE >> $XYZFILE
fi

if grep -q " Entering Gaussian System, Link 0" $OUTFILE; then 
	numatinfo=`grep -m 1 "NAtoms=" $OUTFILE | awk '{print $2}' | sed -e 's/ //g'`
	echo -e "$numatinfo\n" > $XYZFILE 
	if grep -q "Redundant internal coordinates found in file" $OUTFILE; then
		tac $OUTFILE | grep -m1 -B $numatinfo "Redundant internal coordinates found in file." | tac | sed -e 1d | sed -e 's/^[ \t]*//' | sed -e 's/,0,/,/g' | sed -e 's/,-/    -/g' | sed -e 's/,/     /g'  >> $XYZFILE
	elif grep -q -E "(Standard|Input) orientation:" $OUTFILE; then
		tac $OUTFILE | grep -m1 -E -B $(($numatinfo+4)) "(Standard|Input) orientation:"  | tac | sed 1,5d | awk '{print $2 "   "  $4 "   " $5 "   " $6}' >> $XYZFILE
	fi
fi

}


# calculation of the radius of gyration (=gyradius)
# Gyradius = RMSD between Center of Mass and every Atom
function calcRadiusOfGyration {

unset    Atom X Y Z squaredDISTANCE r_gyr
numAtom=0		### counts the number of atoms
MW_M=0			### sum of the molecular mass
sumX=0			### summed x-components weighted by mass
sumY=0			### summed y-components weighted by mass
sumZ=0			### summed z-components weighted by mass
sumsqDistance=0	### summed squared-Distance from each Atom to the Center of Mass
maxlines=$(wc -l $XYZFILE | awk '{print $1}')
for (( i=3 ; i <= $maxlines ; i++ )); do	# loop over all coordinates of XYZFILE 
#	checkline=$(sed -n "$i"p $XYZFILE)
#	echo "check line by regex: $checkline"
#	if [[ $checkline =~ $re1 ]] || [[ $checkline =~ $re2 ]]; then ### check if given line contains atomic coordinates
#		echo "valid line: $i"
		((numAtom++))
		Atom[$i]=$(sed -n "$i"p $XYZFILE | awk '{print $1}')
		X[$i]=$(sed -n "$i"p $XYZFILE | awk '{print $2}')
		Y[$i]=$(sed -n "$i"p $XYZFILE | awk '{print $3}')
		Z[$i]=$(sed -n "$i"p $XYZFILE | awk '{print $4}')
		Mass[$i]=$(convertPTE -W ${Atom[$i]})
		MW_M=$(echo ""$MW_M"+${Mass[$i]}" | bc -l)
		sumX=$(echo "$sumX+(${Mass[$i]}*${X[$i]})" | bc -l)
		sumY=$(echo "$sumY+(${Mass[$i]}*${Y[$i]})" | bc -l)
		sumZ=$(echo "$sumZ+(${Mass[$i]}*${Z[$i]})" | bc -l)
done
#echo "Summation done
if [[ "$numAtom" = 0 ]] || [[ "$MW_M" = 0 ]]; then echo -e "\033[31mCalculation of Center of Mass failed! Aborting.\033[0m" > $tempcalcGyradius; exit 10; fi

X_COM=$(echo "$sumX/"$MW_M"" | bc -l)
Y_COM=$(echo "$sumY/"$MW_M"" | bc -l)
Z_COM=$(echo "$sumZ/"$MW_M"" | bc -l)

for (( i=3 ; i <= $maxlines ; i++ )); do
#echo "loop: $i"
	if ! [[ -z "${Atom[$i]}" ]]; then
#		echo "Calculate distance for ${Atom[$i]}"
		squaredDISTANCE[$i]=$(echo "((${X[$i]}-$X_COM)^2)+((${Y[$i]}-$Y_COM)^2)+((${Z[$i]}-$Z_COM)^2)" | sed 's/--/+/g' | bc -l)
		sumsqDistance=$(echo "$sumsqDistance+${squaredDISTANCE[$i]}" | bc -l)
	fi
done

r_gyr=$(echo "sqrt($sumsqDistance/$numAtom)" | bc -l | xargs printf "%.*f\n" 6)

#### OUTPUT
echo -e "Number of atoms: "$numAtom"\nMolecular Mass in amu: "$MW_M"\nCenter of Mass: ("$X_COM","$Y_COM","$Z_COM")\nRadius of Gyration (in Ang): "$r_gyr"" > $tempcalcGyradius
}


#####################
### PREREQUISITES ###
#####################

scripts=($(echo "readSolventLibrary calcVolume_vdW convertPTE bin.ASV.1.3.11.linux64.intel"))
for (( i=0 ; i < ${#scripts[@]} ; i++ )); do
	if [[ -z $(command -v ${scripts[$i]}) ]]; then echo "Cannot execute all necessary scripts. Command not found: ${script[$i]}"; exit 127; fi
done

######################
##### INPUT-FILE #####
######################
FILE=$1
if ! [[ -f $FILE ]] ; then echo "Input-File does not exist. Aborting."; exit; fi 


##################
#### Defaults ####
##################

unset SUFFIX OUTFILE Vol_M MW_M r_gyr S_rot_gas HARMFREQS Orca_Srot_warning Prog S_rot_sym_corr deuterated

solvent=benzene
Temperature=298.15	# in K
Density=''		# in g/cm^3
MW_S=''			# in g/mol
Vol_S=''		# in Ang**3
Permitivity=''
conccorr=0	### default: solute != solvent
thermo=0	### default: no thermochemistry available

#################
#### Options ####
#################

OPTIND=2
while getopts "hs:T:P:M:D:V:cS:d:" OPTION; do
        case $OPTION in
                h) echo "Help-File does not exist (yet)."; exit
                ;;
				s) solvent=$OPTARG
				;;
                T) 
					if [[ $OPTARG =~ ^[0-9]*([.][0-9]+)?$ ]]; then
						Temperature=$OPTARG	
						#echo "Temperature: $Temperature"
					else
						echo -e "Irregular format.\n-T Temperature [in K]"; exit
					fi
                ;;
				P)
					if [[ $OPTARG =~ ^[0-9]*([.][0-9]+)?$ ]]; then	## to do: correct Permitivity to Permittivity in all scripts
						Permitivity=$OPTARG	## Relative Permittivity of Solvent
					else
						echo -e "Irregular format.\n-P Relative Permitivity"; exit
					fi
				;;
				M)
					if [[ $OPTARG =~ ^[0-9]*([.][0-9]+)?$ ]]; then
						MW_S=$OPTARG ### Molar Mass [g/mol] of Solvent
					else
						echo -e "Irregular format.\n-M Molar Mass (Solvent) [in g/mol]"; exit
					fi
				;;
				D) 
					if [[ $OPTARG =~ ^[0-9]*([.][0-9]+)?$ ]]; then
						Density=$OPTARG ### Density [g/cm^3] of Solvent
					else
						echo -e "Irregular format.\n-D Density (Solvent) [in g/cm^3]"; exit
					fi
				;;
				V) 
					if [[ $OPTARG =~ ^[0-9]*([.][0-9]+)?$ ]]; then
						Vol_S=$OPTARG 	### Molecular Volume [Ang**3] of Solvent
					else
						echo -e "Irregular format.\n-V Molecular Volume (Solvent) [in Ang**3]"; exit
					fi
				;;
				c) conccorr=1 # solute=solvent for standard state correction (S_conc)
					echo "Requested standard state correction for solute=solvent"
				;;
				S)	
					if (( "$OPTARG" >= "1" )); then	# to do: test if '-S 1' and '-S X' (X=S_n output) works
						SymmNum_man=$OPTARG
						S_rot_sym_corr=$(echo "-$R_gas*l($SymmNum_man)" | bc -l)
						echo "Requested Symmetry Number: $SymmNum_man"
					else
						echo "Invalid Symmetry Number"; exit;
					fi
				;;
				d) ### to do: test if '-d 0' works
					if [[ $OPTARG =~ ^[0-9]+$ ]]; then
						deuterated=$OPTARG #degree of deuteration (integer >= 0)
						echo "Requested degree of deuteration: d"$deuterated""
					fi
				;;
				\?)
					echo -e  "\033[0;31m ERROR! Script stopped! \033[0m "
					echo "Invalid option: -$OPTARG"
					exit
				;;
        esac
done

#######################################
#### PROCESS INPUT AND TEMP FILES #####
#######################################

SUFFIX=$(echo $FILE | rev | cut -f1 -d'.' | rev)
#### List of Temporary Files
random=$(head /dev/urandom | tr -dc A-Za-z0-9 | head -c 13 ; echo '')
tempSolventData=$(echo "temp-$random-SolventData-"$FILE".txt" | sed "s/.$SUFFIX//")
tempWarning=$(echo "temp-$random-warning-"$FILE".txt" | sed "s/.$SUFFIX//")
tempInputInfo=$(echo "tempInputInfo-$random-"$FILE".txt" | sed "s/.$SUFFIX//")
tempcalcGyradius=$(echo "temp-$random-calcGyradius-"$FILE".txt" | sed "s/.$SUFFIX//")
tempcalcVolume=$(echo "temp-$random-calcVolume_vdW-"$FILE".txt" | sed "s/.$SUFFIX//")
tempentropies=$(echo "temp-$random-entropies-"$FILE".txt" | sed "s/.$SUFFIX//")
RESULTFILE=$(echo ""$FILE"_EntropySolv_"$solvent".txt" | sed "s/.$SUFFIX//")

echo "Input: $FILE"
echo "Output: $RESULTFILE"
echo "All entropies are given in cal/mol*K at T=$Temperature K (unless specified differently)" > $tempInputInfo
echo "Input-File is $FILE" >> $tempInputInfo
echo "Calculation of S_solv [= S_soln - S_gas + dS_conc]" >> $tempInputInfo

case $SUFFIX in	### valid formats: XYZ and OUT
	xyz)
		XYZFILE=$FILE
	;;
	out)	
		OUTFILE=$FILE
		XYZFILE=$(echo $OUTFILE | sed 's/.out/.xyz/')
		## to do: avoid xyzfile-interefence if it already exists
		outfile-to-xyzfile
		if ! [[ -f $XYZFILE ]]; then echo "Could not read xyz-coordinates out of $OUTFILE"; exit ; fi
		#XYZFILE=$(echo $OUTFILE | sed 's/.out/.xyz/')
		if grep -i -q "thermochemistry" $OUTFILE; then ### check if there is thermochemistry
			thermo=1
			thermoline=$(tac $OUTFILE | grep -n -i -m1 "thermochemistry" | cut -f1 -d':')
			THERMOSECTION=$(tac $OUTFILE | sed -n 1,"$thermoline"p | tac)
			if grep -q "Entering Gaussian System, Link 0" $OUTFILE; then	### GAUSSIAN
				PROG=Gaussian
				S_rot_gas=$(echo "$THERMOSECTION" | grep -A15 "Zero-point correction" | grep Rotational | awk '{print $NF}') ## in cal/mol*K
				checkTemperature=$(echo "$THERMOSECTION" | grep -m1 Temperature | awk '{print $2}')	### Temperature for extracted S_rot_gas
				HARMFREQS=($(echo "$THERMOSECTION" | grep "Frequencies" | awk '{print $3,$4,$5}' | tr ' ' '\n'))
			elif grep -q "* O   R   C   A *" $OUTFILE; then	### ORCA
				PROG=Orca
				S_rot_gas=$(echo "$THERMOSECTION" | grep -A20 "ENTROPY" | grep -m1 "Rotational entropy" | awk '{print $4}') ## in a.u.
				checkTemperature=$(echo "$THERMOSECTION" | grep -m1 "Temperature" | awk '{print $3}')
				PointGroup=$(echo "$THERMOSECTION" | grep -m1 "Point Group" | awk '{print $3}')
				SymmNum=$(echo "$THERMOSECTION" | grep -m1 "Symmetry Number" | awk '{print $NF}')
				S_rot_gas=$(echo "("$S_rot_gas"*627509.5)/$checkTemperature" | bc -l) ## in cal/mol*K
#				Orca_Srot_warning=$(grep -A24 "CAUTION: The rotational entropy" $OUTFILE)	# warning about neglecting symmetry number in orca for S_rot_gas
				HARMFREQS=($(echo "$THERMOSECTION" | grep "freq\." | awk '{print $2}'))
			else
				echo -e "Could not identify the out-File: $OUTFILE\nOnly Gaussian and Orca are supported!"
			fi
			if ! [[ -z $S_rot_sym_corr ]]; then
				if [[ -z $SymmNum ]]; then echo "Could not find a Symmetry Number in $OUTFILE. It is assumed Sn=1"; SymmNum=1; fi
				S_rot_sym_corr=$(echo "$S_rot_sym_corr+$R_gas*l($SymmNum)" | bc -l)
				S_rot_gas=$(echo "$S_rot_gas+$S_rot_sym_corr" | bc -l)
				SymmNum=$(echo ""$SymmNum"-->"$SymmNum_man"")
			fi
			S_rot_gas=$(echo ""$S_rot_gas"+(1.5*"$R_gas"*l($Temperature/$checkTemperature))" | bc -l | xargs printf "%.*f\n" 3) ### Adjust temperature for S_rot_gas
			echo "Calculation of S_soln [= S_trans + S_rot + S_vib + S_cav + dS_conc]" >> $tempInputInfo
#			if ! [[ $(echo $checkTemperature | xargs printf "%.*f\n" 1) = $(echo $Temperature | xargs printf "%.*f\n" 1) ]]; then
#				echo "CAUTION!!! The temperature in $OUTFILE ($checkTemperature) differs from the requested ($Temperature)"
#				echo "CAUTION!!! The temperature in $OUTFILE ($checkTemperature) differs from the requested ($Temperature)" >> $tempWarning
#			fi
			if [[ "${#HARMFREQS[@]}" -eq 0 ]]; then S_vib=0.000; fi
			echo -e "Read from $PROG Output:\n${#HARMFREQS[@]} vibrational frequencies (not printed for clarity)\nS_rot_gas (cal/mol*K, PG $PointGroup Sn $SymmNum): "$S_rot_gas"" >> $tempInputInfo
#			if ! [[ -z $Orca_Srot_warning ]]; then echo "$Orca_Srot_warning";  echo "$Orca_Srot_warning" >> $tempInputInfo; fi
		fi
	;;
	\?)
		echo -e "\033[31mInvalid Format! Aborting.\033[0m"
		removeTempFiles
		exit
	;;
esac

##########################
#### CHECK XYZ FORMAT ####
##########################
xyz-format-check
if [[ $xyzvalid -ne 1 ]] ; then 
	convert-xyz-to-valid
	xyz-format-check
	if [[ $xyzvalid -ne 1 ]] ; then 
		echo "Script stopped. $XYZFILE must be in xmol-format with case-sensitive Element Symbols."
		echo "Example:"
		echo "1st line: [Number of Atoms]"
		echo "2nd line: [Whatevr line]"
		echo "3rd line: [case-sensitive Element Symbol] [X] [Y] [Z]"
		echo "...."
		exit
	fi
fi

############################
#### SOLVENT PARAMETERS ####
############################

readSolventLibrary $solvent > $tempSolventData
ERRORFILE=$tempSolventData; checkExitCode; unset ERRORFILE
#### read data from solvent library unless given explicitly
if [[ -z $Density ]]; then Density=$(grep -m1 -i "Density" $tempSolventData | awk '{print $NF}'); else echo "Solvent Density is modified by hand: $Density"; fi
if [[ -z $MW_S ]]; then MW_S=$(grep -m1 -i "MolarMass" $tempSolventData | awk '{print $NF}'); else echo "Solvent Molar Mass is modified by hand: $MW_S"; fi
if [[ -z $Vol_S ]]; then Vol_S=$(grep -m1 -i "vdW-Volume" $tempSolventData | awk '{print $NF}'); else echo "Solvent vdW-Volume is modified by hand: $Vol_S"; fi
if [[ -z $Permitivity ]]; then Permitivity=$(grep -m1 -i "Permitivity" $tempSolventData | awk '{print $NF}'); else echo "Solvent Permitivity is modified by hand: $Permitivity"; fi
if ! [[ -z $deuterated ]]; then
	solvent=$(echo ""$solvent"-d"$deuterated"")
	Density=$(echo "$Density*(1+((1.006*$deuterated)/$MW_S))" | bc -l | xargs printf "%.*f\n" 3)
	MW_S=$(echo "$MW_S+($deuterated*1.006)" | bc -l | xargs printf "%.*f\n" 3)
fi
echo -e "Read solvent parameters:\nSolvent: $solvent\nPermitivity: $Permitivity\nDensity: $Density g/mL\nMolar Mass: $MW_S g/mol\nvdW-Volume: $Vol_S Ang**3"
newSection

###########################
#### SOLUTE PARAMETERS ####
###########################

echo "Calculate solute parameters..."
echo "Calculate the vdW-Volume..."
calcVolume_vdW $XYZFILE > $tempcalcVolume
ERRORFILE=$tempcalcVolume; checkExitCode; unset ERRORFILE
############
echo "Calculate the Radius of Gyration..."
calcRadiusOfGyration
ERRORFILE=$tempcalcGyradius; checkExitCode; unset ERRORFILE
#calcGyradius $XYZFILE > $tempcalcGyradius
#ERRORFILE=$tempcalcGyradius; checkExitCode; unset ERRORFILE
Vol_M=$(tail -1 $tempcalcVolume | awk '{print $NF}')
#MW_M=$(grep "Molecular Mass" $tempcalcGyradius | awk '{print $NF}')
#r_gyr=$(tail -1 $tempcalcGyradius | awk '{print $NF}')
#############
newSection
echo -e "Solute parameters ($numAtom atoms):\nvdW-Volume: $Vol_M Ang**3\nMolecular Mass: $MW_M amu\nGyradius: $r_gyr Ang"
if ! [[ -z "$S_rot_gas" ]]; then echo -e "S_rot_gas (PG $PointGroup Sn $SymmNum): "$S_rot_gas" cal/mol*K"; fi	#### S_rot_gas assigned in case-section (see above)
echo -e "${#HARMFREQS[@]} vibrational frequencies (not printed for clarity)"
newSection

#############################
##### CALCULATE ENTROPY #####
#############################

echo "Calculate S_trans..."
calcS_trans > $tempentropies
echo -e "Info: Cavity volume: $Vol_cav Ang**3\nInfo: Number of accessible cavities: $N_cav (typically 1 unless small solute in bulky/low density solvents)"

echo "Calculate S_rot..."
calcS_rot >> $tempentropies

if ! [[ -z ${HARMFREQS[@]} ]]; then
	echo "Calculate S_vib..."
	calcS_vib_qRRHO
fi

echo "Calculate S_cav..."
calcS_cav >> $tempentropies

echo "Calculate S_conc..."
calcS_conc >> $tempentropies
echo -e "Info: Standard state correction for 1 bar -> $ref_sol"

S_solv=$(echo "$S_trans_diff+$S_cav+$S_rot_diff+$S_conc" | sed 's/--/+/g' | bc -l | xargs printf "%.*f\n" 3) ### = S_soln - S_gas + S_conc = S_trans_diff + S_cav + S_rot_diff + S_conc
if [[ "$thermo" = "1" ]]; then
#	echo -e "bugfix: trans: $S_trans\nvib: $S_vib\nrot: $S_rot\ncav: $S_cav\nconc: $S_conc"
	S_soln=$(echo ""$S_trans"+"$S_vib"+"$S_rot"+"$S_cav"+"$S_conc"" | sed 's/--/+/g' | bc -l | xargs printf "%.*f\n" 3)
	S_vib=$(echo $S_vib | xargs printf "%.*f\n" 3)
	S_rot=$(echo $S_rot | xargs printf "%.*f\n" 3)
fi
S_trans=$(echo $S_trans | xargs printf "%.*f\n" 3)
S_cav=$(echo $S_cav | xargs printf "%.*f\n" 3)
S_conc=$(echo $S_conc | xargs printf "%.*f\n" 3)
S_trans_diff=$(echo $S_trans_diff | xargs printf "%.*f\n" 3)
S_rot_diff=$(echo $S_rot_diff | xargs printf "%.*f\n" 3)

#### PRINT ENTROPIES
newSection
echo -e "All Entropies in cal/mol*K at $Temperature K (1 bar -> $ref_sol):"

if [[ "$thermo" = "1" ]]; then
	echo -e "S_trans_diff:\t$S_trans_diff\nS_rot_diff:\t$S_rot_diff\nS_trans:\t$S_trans\nS_rot:\t\t$S_rot\nS_vib:\t\t$S_vib\nS_cav:\t\t$S_cav\nS_conc:\t\t$S_conc\n\t\t-------\nS_solv:\t\t$S_solv\nS_soln:\t\t$S_soln"
	echo -e "S_trans_diff:\t$S_trans_diff\nS_rot_diff:\t$S_rot_diff\nS_trans:\t$S_trans\nS_rot:\t\t$S_rot\nS_vib:\t\t$S_vib\nS_cav:\t\t$S_cav\nS_conc:\t\t$S_conc\n\t\t-------\nS_solv:\t\t$S_solv\nS_soln:\t\t$S_soln" > $tempentropies
else
	echo -e "S_trans_diff:\t$S_trans_diff\nS_rot_diff:\t$S_rot_diff\nS_trans:\t$S_trans\nS_cav:\t\t$S_cav\nS_conc:\t\t$S_conc\n\t\t-------\nS_solv:\t\t$S_solv"
	echo -e "S_trans_diff:\t$S_trans_diff\nS_rot_diff:\t$S_rot_diff\nS_trans:\t$S_trans\nS_cav:\t\t$S_cav\nS_conc:\t\t$S_conc\n\t\t-------\nS_solv:\t\t$S_solv" > $tempentropies
fi


###### CREATE OUTPUT FILE
cat $tempInputInfo > $RESULTFILE
newSection >> $RESULTFILE
cat $tempSolventData >> $RESULTFILE
newSection >> $RESULTFILE
cat $tempcalcVolume >> $RESULTFILE
cat $tempcalcGyradius >> $RESULTFILE
newSection >> $RESULTFILE
cat $tempentropies >> $RESULTFILE
if [[ -f $tempWarning ]]; then echo "Please consider detected Warnings (see $RESULTFILE)!"; cat $tempWarning >> $RESULTFILE; fi

### clean directory from temporary files
removeTempFiles
if [[ -f $XYZFILE ]] && [[ "$XYZFILE" != "$FILE" ]]; then rm $XYZFILE; fi


## benchmark vs exp: num=$(wc -l list-compounds.txt | awk '{print $1}'); for (( i= 1 ; i <= $num; i++ )); do unset S_solv ref; T=$(sed -n "$i"p list-compounds.txt | awk '{print $4}'); soluteindex=$(sed -n "$i"p list-compounds.txt | awk '{print $1}'); solvent=$(sed -n "$i"p list-compounds.txt | awk '{print $3}' | tr '[:upper:]' '[:lower:]'); FILE=$(find . -name ""$soluteindex"_*.xyz" | cut -f2 -d'/'); solute=$(echo $FILE | cut -f2 -d'_' | cut -f1 -d '.' | tr '[:upper:]' '[:lower:]'); if [[ "$solvent" = "$solute" ]]; then S_solv=$(calcEntropySolv -f $FILE -s $solvent -T $T -c | tail -1 | awk '{print $NF}'); ref=liq; else S_solv=$(calcEntropySolv -f $FILE -s $solvent -T $T | tail -1 | awk '{print $NF}'); fi; echo $i $S_solv $solute $solvent $ref $T >> results_PBE0D3BJ_def2TZVPP.txt; done
