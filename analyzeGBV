#!/bin/bash
#  
# by Jama Ariai (jama.ariai@oc.jlug.de)
# analyzeGBV = analyze Good and Bad Values
# Syntax: analyzeGBV -i [input] {optional: -t VAR}
# input delimiter: ','
# default THRESHHOLD=0.001 variable by -t
#

unset inp ARR GOODVALUES BADVALUES AVG diff_AVG_ARR diff_AVG_GOODVALUES GOODVALUES_avg
THRESHHOLD=0.001

while getopts "hi:t:" OPTION
do
	    case $OPTION in
		    		h)
								cat "$PATHSCRIPTS/help_analyzeGBV.txt" 
								#			echo "Help-File does not exist (yet)".
											exit
													;;
															i)	# input (syntax; numbers separated with ','
																		input=$OPTARG
																				inp=($(echo $input | sed 's/,/ /g'))
																						;;
																								t)	# THRESHHOLD
																												THRESHHOLD=$OPTARG
																														;;
																																*)
																																				echo -e "Nonexistent flag.\033[31m Aborting.\033[0m"
																																							exit
																																									;;
																																									    esac
																																								    done 

																																								    THRESHHOLDFACTOR=$(echo "1/$THRESHHOLD" | bc -l)

																																								    #### insert regex check: integer/floats only as input

																																								    ARR=($(echo ${inp[@]} | sed "s/ /\n/g" | sort -n)) ### sorted array from i=0 < i=n
																																								    i_median=$(echo "${#ARR[@]}/2" | bc -l | cut -f1 -d'.')

																																								    ####### Calculate Median :$MEDIAN
																																								    if (( ${#ARR[@]} % 2 )); then	#uneven case, median = middle value 
																																									    		MEDIAN=${ARR[$i_median]}				### reminder: array starts from 0 not from 1
																																										else	#even case, median = average of lower and upper limit
																																													helpvar=$(echo "$i_median-1" | bc -l)	### reminder: array starts from 0 not from 1
																																															MEDIAN=$(echo "(${ARR[$i_median]}+${ARR[$helpvar]})/2" | sed 's/++/+/g' | bc -l)
																																														fi

																																														AVG=$(echo "(${ARR[@]})/${#ARR[@]}" | sed 's/ /+/g' | sed 's/++/+/g' | bc -l)	### arithmetic mean of ARR before the test

																																														############## CHECK IF VALUES MEET CRITERION
																																														echo ""
																																														good_index=-1
																																														bad_index=-1
																																														sum_diff_AVG_ARR=0
																																														echo -e "Criterion: |Value-Median| < Threshhold\nMedian: $MEDIAN (arithmetic mean: $AVG)\nThreshhold: $THRESHHOLD\n${#ARR[@]} values: ${ARR[@]}"
																																														for (( i=0 ; i < ${#ARR[@]} ; i++ )); do
																																																CHECK[$i]=$(echo "(${ARR[$i]}-$MEDIAN)*$THRESHHOLDFACTOR" | sed 's/--/+/g' | bc -l | sed 's/-//')	#### THRESHHOLD = 1/THRESHHOLDFACTOR
																																																	CHECK[$i]=$(echo "${CHECK[$i]}" | head -c1)
																																																		diff_AVG_ARR=$(echo "${ARR[$i]}-$AVG" | sed 's/--/+/g' | bc -l | sed 's/^-//')
																																																			sum_diff_AVG_ARR=$(echo $sum_diff_AVG_ARR+$diff_AVG_ARR | bc -l)
																																																				if [[ ${CHECK[$i]} =~ ^[0\.] ]]; then			# below the threshhold. Good values
																																																							((good_index+=1))
																																																									GOODVALUES[$good_index]=${ARR[$i]}	# index of good values starts from 0 again, no relation to index from the original values
																																																									#		echo "Good value: ${GOODVALUES[$good_index]}"
																																																										else
																																																													((bad_index+=1))
																																																															BADVALUES[$bad_index]=${ARR[$i]}	# index of bad values starts from 0 again, no relation to index from the original values
																																																															#		echo "Bad value: ${BADVALUES[$bad_index]}"
																																																																fi
																																																															done
																																																															echo "${#GOODVALUES[@]} passed and ${#BADVALUES[@]} discarded."

																																																															MAE=$(echo $sum_diff_AVG_ARR/${#ARR[@]} | bc -l) ### before the test
																																																															#echo "Arithmetic Mean is: $AVG"
																																																															#echo "MAE: $MAE"

																																																															max_significance=$(echo "${ARR[$i_median]}" | cut -f2 -d'.' | tr -cd '[:digit:]' | wc -c)	### no more than significant digits than the given values have

																																																															if [[ "${#GOODVALUES[@]}" -ne "${#ARR[@]}" ]]; then ### analyze good values only if they are different from the original ones

																																																																	#### Statistics of GOODVALUES
																																																																		if ! [[ -z ${GOODVALUES[@]} ]]; then
																																																																					GOODVALUES_avg=$(echo "(${GOODVALUES[@]})/${#GOODVALUES[@]}" | sed 's/ /+/g' | bc -l)
																																																																							echo "Arithmetic mean of good values: $GOODVALUES_avg"
																																																																									sum_diff_AVG_GOODVALUES=0
																																																																											for (( i=0 ; i < ${#GOODVALUES[@]} ; i++ )); do
																																																																															diff_AVG_GOODVALUES=$(echo "${GOODVALUES[$i]}-$GOODVALUES_avg" | sed 's/--/+/g' | bc -l | sed 's/^-//')
																																																																																		sum_diff_AVG_GOODVALUES=$(echo "$sum_diff_AVG_GOODVALUES+$diff_AVG_GOODVALUES" | bc -l)
																																																																																				done
																																																																																						MAE_GOODVALUES=$(echo "$sum_diff_AVG_GOODVALUES/${#GOODVALUES[@]}" | bc -l)
																																																																																								echo "MAE of good values: $MAE_GOODVALUES"
																																																																																										#### Significant Digits: count all decimal digits and substract remaining digits after removing leading zeros
																																																																																												significance_mae_goodvalues=$(echo "$MAE_GOODVALUES" | cut -f2 -d'.')
																																																																																														significance_mae_goodvalues=$(echo "($(echo $significance_mae_goodvalues | tr -cd '[:digit:]' | wc -c)-$(echo $significance_mae_goodvalues | sed "s/^0*//" | tr -cd '[:digit:]' | wc -c))+1" | bc -l)
																																																																																																if (( "$significance_mae_goodvalues" < "$max_significance" )); then 
																																																																																																				GOODVALUES_avg=$(echo "$GOODVALUES_avg" | xargs printf "%.*f\n" $significance_mae_goodvalues)
																																																																																																						else
																																																																																																										GOODVALUES_avg=$(echo "$GOODVALUES_avg" | xargs printf "%.*f\n" $max_significance)
																																																																																																												fi
																																																																																																													fi
																																																																																																												fi
																																																																																																													
																																																																																																												#### Significant Digits: count all decimal digits and substract remaining digits after removing leading zeros
																																																																																																												significance_mae=$(echo "$MAE" | cut -f2 -d'.')
																																																																																																												significance_mae=$(echo "($(echo $significance_mae | tr -cd '[:digit:]' | wc -c)-$(echo $significance_mae | sed "s/^0*//" | tr -cd '[:digit:]' | wc -c))+1" | bc -l)
																																																																																																												if (( "$significance_mae" < "$max_significance" )); then 
																																																																																																														AVG=$(echo "$AVG" | xargs printf "%.*f\n" $significance_mae)
																																																																																																													else
																																																																																																															AVG=$(echo "$AVG" | xargs printf "%.*f\n" $max_significance)
																																																																																																														fi

																																																																																																														### OUTPUT

																																																																																																														if [[ "${#GOODVALUES[@]}" -eq "${#ARR[@]}" ]]; then	### if all value are good, this is the output
																																																																																																																QUALITY=1	# good
																																																																																																																	echo "Quality: $QUALITY"
																																																																																																																		echo "All ${#ARR[@]} values passed the criterion (threshhold: $THRESHHOLD) with MAE: $MAE"
																																																																																																																			echo "Final value is the arithmetic mean:"
																																																																																																																				echo "$AVG"
																																																																																																																			elif ! [[ -z $GOODVALUES_avg ]] && [[ "${#GOODVALUES[@]}" -gt 9 ]]; then 	### if not all but at least 10 values are good, this is the output
																																																																																																																					GOODVALUES_avg=$(echo "$GOODVALUES_avg" | xargs printf "%.*f\n" $significance_mae_goodvalues)
																																																																																																																							QUALITY=1	# good
																																																																																																																									echo "Quality: $QUALITY"
																																																																																																																											echo "Passed/Discarded-Ratio for a set of ${#ARR[@]} values (AVG: $AVG, MAE: $MAE, Threshhold: $THRESHHOLD): ${#GOODVALUES[@]}/${#BADVALUES[@]} with new MAE: $MAE_GOODVALUES"
																																																																																																																													echo "Final value is the arithmetic mean:"
																																																																																																																															echo "$GOODVALUES_avg"
																																																																																																																														else	### if all values are bad, this is the output
																																																																																																																																	QUALITY=-1 # bad
																																																																																																																																			echo "Quality: $QUALITY"
																																																																																																																																					echo "CAUTION! There are ${#BADVALUES[@]} of ${#ARR[@]} values not passing the criterion of $THRESHHOLD"
																																																																																																																																				fi



